#+title:    Proyecto 01 - Organización de Computadores
#+author:   Juan Antonio González Orbe, Alexander Goussas
#+language: es
#+date:     3 de Julio, 2022
#+export_file_name: ../proyecto01.pdf

#+setupfile: ./setup.org

\clearpage

* Instrucciones
Este proyecto consiste en implementar un programa en lenguaje ensamblador que
simule el funcionamiento de una cabina telefónica.

- El usuario puede ingresar monedas de diferentes denominaciones desde 5
  centavos, y puede ingresar tantas monedas cómo desee.
- El usuario ingresa el número al que desea llamar. (Validar)
- El costo de la llamada por minuto será generado de manera aleatoria entre un
  valor de 10 y 40 centavos de dólar.
- Luego se deberá simular la llamada, y el usuario podrá colgar, o la llamada
  puede terminar debido a que se le terminó el saldo.
- La cabina deberá mostrar una alerta cuando el saldo sea menor a ~$0.05~
- La cabina dará vuelto en caso de ser necesario. Recuerde que la mínima
  denominación son monedas de 5 centavos.

** Entregables
- Código en lenguaje ensamblador.
- Sus códigos deben estar apropiadamente documentados. (En un sólo idioma)
- Documento en PDF que contenga:
  - Consideraciones sobre el uso de su programa
  - Capturas de Pantalla de su programa funcionando
  - Referencias

- *EXTRAS*:
  - Implementación del programa en C

* Autores y Extras
Éste proyecto es realizado por:

| Nombre                       | Usuario GH  | E-Mail (ESPOL)          |
|------------------------------+-------------+-------------------------|
| /Juan Antonio González Orbe/ | =anntnzrb=  | =juangonz@espol.edu.ec= |
| /Alexander Goussas/          | =aloussase= | =agoussas@espol.edu.ec= |

El código fuente puede ser encontrado en *GitHub*, en el siguiente repositorio:

_<[[https://github.com/aloussase/CCPG1049-2022-P1][https://github.com/aloussase/CCPG1049-2022-P1]]>_

* Implementación
Este documento adjunta el código fuente de las dos versiones implementadas del
programa (=.c= y =.asm=), sin embargo, única y exclusivamente será documentada
la versión solicitada, que es la versión en *MIPS*.  En la sección
"[[*Código fuente][Código fuente]]" estará incluido el contenido adjunto, por la parte final del
documento, esto para no ser intrusivo al lector.
El código fuente se encuentra /bien documentado/ por lo que leer e interpretar
el programa debe fácil.

El número telefónico solicitado por el programa no sirve algún propósito, por lo
que se ha optado por agregar una funcionalidad extra, que es verificar que la
cantidad de dígitos sea igual a ~10~.  El número indicado anteriormente es la
cantidad de dígitos que contempla un número telefónico celular Ecuatoriano
válido, ésto es, sin extensión internacional (~+593~) y con los *2* primeros
dígitos iguales a =09=.

A continuación se encuentra una explicación de funciones empleadas, creación y
ejecución del
programa.

** Funciones
Las funciones del proyecto se encuentran de forma individual, cada una en un
archivo independiente.  Éstas pueden ser encontradas en la carpeta =src/=.

#+begin_src shell :exports results :results output
ls -l ../src | awk 'NR!=1 {print $9}'
#+end_src

Por cada archivo (función) se encontrará una pequeña documentación de la
función y que registros empleados.

** Compilación y Ejecución del Programa
*SPIM* es un simulador de *MIPS*, éste es capaz de correr código ensamblador
dirigido a *MIPS*, así como *MIPS Assembler and Runtime Simulator (MARS)*.  La
diferencia mas evidente entre estos dos simuladores es que *SPIM* permite correr
comandos desde la consola, mientras *MARS* en sí es un *IDE (Integrated
Development Environment)*.

Para este proyecto se ha optado por emplear *SPIM* ya que facilita la
automatización de comandos a través de la consola, por ejemplo, es fácil
integrar *SPIM* con algún /target/ de ~Makefile~.

Mediante ~Makefile~ podemos crear /targets/ dirigidos a *SPIM* que nos permite
simplemente correr:

#+begin_src sh
make asm
#+end_src

Y como resultado ver la ejecución del programa en la misma terminal.

A partir de lo anterior, es importante mencionar que el código escrito está
diseñado para poder ser ejecutado en *SPIM* y *MARS* intercambiablemente.
Se ha evitado el empleo de instrucciones o directivas específicias de alguna
plataforma para así fomentar la portabilidad.

En *MARS* es posible definir /macros/ para así encapsular código y evitar
repeticiones, similar al concepto de funciones, pero aquí la sustitución es
textual, no existe algún tipo de transformación.

A continuación un ejemplo de un macro para encapsular el conjunto de
instrucciones para imprimir un número entero:

#+begin_src asm
.macro print_int (%n)
li $v0, 1
add $a0, $zero, %n
syscall
.end_macro

print_int (10) # ==> 10
#+end_src

Desafortunadamente, los /macros/ son una característica exclusiva de *MARS*, por
lo que incluirla en el proyecto violaría el principio de portabilidad propuesto
por los autores del proyecto.  En otras palabras, los /macros/ realmente no son
parte del languaje *MIPS*, éstos son una extensión al lenguaje.

Hasta el momento de éste escrito, se contempla que la persona designada a
revisar y calificar este proyecto empleará *MARS*, por lo que, técnicamente, es
posible usar estos mencionados /macros/. Sin embargo, para evitar complicaciones
se ha decidido no emplear dicha característica.

\clearpage

** Archivo ~make.in~ y Desarrollo del Proyecto
Este archivo contiene el /pseudo-código/ del programa en lenguaje *MIPS*, que
posteriormente será transformado a su version final (implementación real del
programa) con nombre de archivo =main.asm=.

La decisión de trabajar de esta manera permite incluir directivas creadas por
los autores como =@include <archivo.asm>= sin tener que tener todo declarado en
el mismo archivo.  A partir de esto, cada función creada para el programa se
encuentra independientemente en la carpeta =src/=, como se menciona en la
sección [[*Funciones][Funciones]].

Sea el ejemplo, en =src/= se puede encontrar los siguientes archivos:
- =strlen.asm=
- =check_number_valid.asm=

Mediante esta estructurada, se permite separar el programa solicitado con las
funciones que éste require, esto implica que si hay un error en la función
=strlen=, no es necesario nadar buscando en alguna parte del archivo, sino ir a
su respectivo archivo directamente.

La transformación de /pseudo-código/ a código válido en *MIPS* es posible
gracias a un simple y pequeño script ubicado en la carpeta =scripts/= escrito
en ~POSIX Shell~, éste busca y reemplaza las directivas creadas para así
generar el archivo *MIPS* real.  Este proceso es único y exclusivo para los
desarrolladores del proyecto, el archivo final es llamado =main.asm= y es el
entregable del proyecto en sí.

\clearpage

#+attr_latex: :width 14cm
#+caption: Ejemplo de ejecución del programa en ASM (MIPS) #1
[[./assets/prog-run-asm-1.png]]

#+attr_latex: :width 14cm
#+caption: Ejemplo de ejecución del programa en C #1
[[./assets/prog-run-c-1.png]]

\clearpage

** Tests y GitHub Workflows
En el repositorio de GitHub se puede encontrar un *workflow* que permite correr
una serie de tests pertinentes a la carptes =tests/=.  Éstos fueron creados
para depurar posibles errores en las implementaciones individuales de las
funciones (esto gracias al hecho de haberlas separado por archivo
independientes); la creación de los mismos facilitó el desarrollo de las
funciones ya que el chequeo era aislado del programa.

Los tests se corren cada vez que algun contribuidor ejerce un /push/ al
repositorio remoto.  La siguiente imágen adjunta muestra una serie de tests
exitosos:

#+attr_latex: :width 12cm
#+caption: GitHub Workflows
[[./assets/workflows.png]]

\clearpage

* Código fuente

** Versión =.asm=
#+include: ../main.asm src asm -n

\clearpage

** Versión =.c=
#+include: ../main.c src c -n

\clearpage

* Referencias
- [[https://youtube.com/playlist?list=PLfe6IcA_dEWleHVhk522FCPc4aeeaFFMr][_Computer Architecture with MIPS_]]
- [[http://spimsimulator.sourceforge.net/][_SPIM: A MIPS32 Simulator - SourceForge_]]
- [[http://courses.missouristate.edu/kenvollmar/mars/][_MARS (MIPS Assembler and Runtime Simulator)_]]
